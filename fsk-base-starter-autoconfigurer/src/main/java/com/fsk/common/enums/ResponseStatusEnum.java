package com.fsk.common.enums;

/**
 * 兼容老项目距
 *
 * since 1.12.0: This class would be removed
 */
@Deprecated
public enum ResponseStatusEnum {
  //10700 --10799
  /**
   * 200:success
   */
  SUCCESS("200", "success", "INFO"),
  JIN_J_SUCCESS("0", "true", "INFO"),
  ERROR("-200", "error", "FAIL"),
  NO_AUTHORITY("100","请求失败，请重新登陆！","FAIL"),
  /**
   * 业务异常：201:用户授权认证没有通过!客户端请求参数中无token信息
   */
  FAIL_201("201", "用户授权认证没有通过!客户端请求参数中无token信息", "FAIL"),
  /**
   * 业务异常：202:账号或密码不正确
   */
  FAIL_202("202", "账号或密码不正确", "FAIL"),
  /**
   * 业务异常：203, "验证码不正确"
   */
  FAIL_203("203", "验证码不正确", "FAIL"),
  /**
   * 业务异常：204, "登录失败！"
   */
  FAIL_204("204", "登录失败！", "FAIL"),
  /**
   * 业务异常：205, "接口参数校验不正确"
   */
  FAIL_205("205", "接口参数校验不正确", "FAIL"),
  /**
   * 业务异常：206, "数据修改失败"
   */
  FAIL_206("206", "数据修改失败", "FAIL"),

  /**
   * 业务异常：207, "查询数据失败"
   */
  FAIL_207("207", "查询数据失败", "FAIL"),
  /**
   * 业务异常：208, "数据修改失败"
   */
  FAIL_208("208", "数据新增失败", "FAIL"),
  /**
   * 业务异常：209, "该名称已存在"
   */
  FAIL_209("209", "该名称已存在", "FAIL"),

  /**
   * 业务异常：207, "查询数据失败"
   */
  FAIL_210("210", "暂无数据", "FAIL"),

  FAIL_211("211", "发送短信失败！", "FAIL"),
    FAIL_212("212", "排程时间有冲突！", "FAIL"),

  FAIL_213("213", "工单信息不存在", "FAIL"),
  FAIL_214("214", "只有未服务的工单才能修改", "FAIL"),
  FAIL_215("215", "护理时间冲突，不可以添加", "FAIL"),
  FIL_216("216", "该客户当天已存在排程，是否继续", "FAIL"),
  FAIL_236("236", "验证码发送失败", "FAIL"),
  FAIL_237("237", "客户信息不存在,请重新选择", "FAIL"),
  FAIL_238("238", "该工单暂不支持修改", "FAIL"),

  FAIL_239("239", "只有签入状态为未签入的工单才能进行删除", "FAIL"),

  FAIL_240("240", "工单状态为已完成的工单不能进行删除", "FAIL"),
  FAIL_241("241", "暂无排程记录", "FAIL"),
  FAIL_242("242", "服务已开启,该被照护人历史排程与其他排程冲突,请重新维护排程日期", "FAIL"),
  FAIL_243("243", "每天新增临时工单数量超限！", "FAIL"),
  FAIL_244("244", "只能新增今明两日工单,请重新选择服务开始时间！", "FAIL"),
  FAIL_245("245", "排程结束时间不能为24:00", "FAIL"),
  FAIL_246("246", "请求数据token不正确", "FAIL"),
  FAIL_247("247", "您已对该工单进行过评价,不能再评价", "FAIL"),
  FAIL_248("248", "工单的计划开始时间不能小于当前时间！", "FAIL"),
  FAIL_249("249", "实际结算时长不能为空！", "FAIL"),
  FAIL_250("250", "护理时间冲突，不可以添加", "FAIL"),

  FAIL_10700("10700", "订单已生效，暂无可恢复的排程信息！", "FAIL"),

  FAIL_10701("10701", "订单已生效，该被照护人历史排程与其他排程冲突,请重新维护！", "FAIL"),

  FAIL_10702("10702", "CODE生成异常！", "FAIL"),
  FAIL_10703("10703", "历史排程数与服务频次不符，请重新维护排程！", "FAIL"),
  FAIL_10704("10704", "无数据权限,不支持导出！", "FAIL"),
  FAIL_10705("10705", "获取组织信息异常！", "FAIL"),
  FAIL_10706("10706", "当前组织下还存在组织单元,不支持导出！", "FAIL"),
  FAIL_10707("10707", "当前组织下还存在组织单元,不支持查询！", "FAIL"),
  FAIL_10708("10708", "获取结算流水号code失败！", "FAIL"),
  FAIL_10712("FAIL_10712", "结算失败，修改的金额不能高于初始金额！", "FAIL"),
  FAIL_10713("FAIL_10713", "结算失败，请检查结算状态！", "FAIL"),

  FAIL_10808("10808", "该回访工单不存在", "FAIL"),
  FAIL_10809("10809", "该回访工单已回访完成,不能继续回访", "FAIL"),
  FAIL_10810("10810", "回访内容不能为空", "FAIL"),
  FAIL_10811("10811", "该被照护人还没有被服务过,不能新增回访工单", "FAIL"),
  FAIL_10812("10812", "当前组织下还存在组织单元,不支持导出！", "FAIL"),
  FAIL_10813("10813", "只能取消待回访的工单！", "FAIL"),
  FAIL_10814("10814", "组织CODE不能为空！", "FAIL"),
  FAIL_10815("10815", "回访完成之前要填写满意度！", "FAIL"),
  FAIL_10827("10827", "远程调用查询订单信息接口异常！", "FAIL"),


  FAIL_10901("10901", "所选工单存在多个组织单元！", "FAIL"),
  FAIL_10902("10902", "所选工单有工单已存在该费用类别的结算单！", "FAIL"),
  FAIL_10903("10903", "所选工单存在多个产品！", "FAIL"),
  FAIL_10904("10904", "所选工单存不能有审核不通过的工单！", "FAIL"),
  FAIL_10905("10905", "自费结算单不能存在多个老人的工单！", "FAIL"),
  FAIL_10906("10906", "只能回退待结算或结算中的明细！", "FAIL"),
  FAIL_10907("10907", "选择的工单与结算单的产品不一致！", "FAIL"),
  FAIL_10908("10908", "医保类型为空！", "FAIL"),
  FAIL_10909("10909", "请选择按周或按月", "FAIL"),
  FAIL_10910("10910", "结算单下最多8000条数据", "FAIL"),
  FAIL_10911("10911", "该组织未定义结算机构", "FAIL"),
  FAIL_10912("10912", "该组织暂不支持上传工单", "FAIL"),
  FAIL_10913("10913", "请正确填写结算单名称，例如“197001”", "FAIL"),
  FAIL_10914("10914", "工单号不存在”", "FAIL"),
  FAIL_10915("10915", "文件已存在,不能重复上传”", "FAIL"),
  FAIL_10916("10916", "被回访组织信息不存在！", "FAIL"),
  FAIL_10917("10917", "回访组织信息不存在！", "FAIL"),
  FAIL_10918("10918", "此订单已无抵扣服务次数,无法继续派单！", "FAIL"),
  FAIL_10923("10923", "商业订单子订单号为空,无法计算总服务次数！", "FAIL"),
  FAIL_10927("10927", "此次派单抵扣次数与已派单次数和超过服务总次数,无法继续派单！", "FAIL"),

  /**
   * 系统警告：700:系统警告
   */
  WARN_700("700", "系统警告", "WARN"),
  /**
   * 系统警告：701:字典初始化失败
   */
  WARN_701("701", "字典初始化失败", "WARN"),
  /**
   * 系统异常：900:系统异常
   */
  ERROR_900("900", "系统异常", "ERROR"),
  /**
   * 系统异常：901:系统异常
   */
  ERROR_901("901", "IO流读取异常", "ERROR"),

  /**
   * 系统异常：902:系统异常
   */
  ERROR_902("902", "pad端token失效", "ERROR"),

  ERROR_903("903", "初始化数据字典失败","ERROR"),

  ERROR_10700("10700", "未获取到数据","ERROR"),

  ERROR_10701("10701", "投诉类型为护理员时，护理员信息不能为空","ERROR"),
  ERROR_10702("10702", "审核状态异常","ERROR"),
  ERROR_10703("10703", "非审核通过和审核不通过状态，无需复审","ERROR"),
  ERROR_10704("10704", "远程调用失败","ERROR"),
  ERROR_10705("10705", "AES加密失败","ERROR"),

  ERROR_10706("10706", "同步时间段时，必须传入syncType，10为in表；20为out表", "ERROR"),
  ERROR_10707("10707", "密码错误","ERROR"),
  ERROR_10710("10710", "所抢单子不存在","ERROR"),
  ERROR_10711("10711", "抱歉! 该单已被其他服务人员抢单成功，请重新选择抢单资源~","ERROR"),
  ERROR_10730("10730", "该员工信息不存在","ERROR"),
  ERROR_10731("10731", "该订单已失效","ERROR"),

  ERROR_10783("10783", "登录信息不存在", "FAIL"),
  ERROR_10719("10719", "修改信标工单异常描述异常","ERROR"),
  FAIL_10720("10720", "评估工单的评估开始时间不能小于当前时间！", "FAIL"),
  ERROR_10755("10755", "修改评估工单服务人员失败!", "ERROR"),
  ERROR_10756("10756", "修改评估订单状态失败!", "ERROR"),
  ERROR_10759("10759", "查询评估订单信息失败!", "ERROR"),
  ERROR_10801("10801", "服务人员异常", "ERROR"),
  ERROR_10802("10802", "服务人员资质类型及编号未维护", "ERROR"),
  ERROR_10803("10803", "客户订单异常", "ERROR"),
  ERROR_10804("10804", "客户订单服务计划编码未维护", "ERROR"),
  ERROR_10805("10805", "orgUnitCode组织code不能万序使用结算", "ERROR"),
  ERROR_10708("10708", "订单信息不存在","ERROR"),
  ERROR_10709("10709", "工单视频抽检不存在","ERROR"),
  ERROR_17005("17005", "被照护人code,身份证号,手机号,订单号至少传一个参数","ERROR"),
  ERROR_17006("17006", "查询工单信息时间不能为空!","ERROR"),

  ;

  private String code;
  private String msg;
  private String type;

  public String getCode() {
	return code;
  }
  public String getMsg() {
	return msg;
  }

  public String getType() {
	return type;
  }

  private ResponseStatusEnum(String code, String msg, String type) {
	this.code = code;
	this.msg = msg;
	this.type = type;
  }
  public static String getValue(String code) {
	ResponseStatusEnum[] enums = ResponseStatusEnum.values();
	for (ResponseStatusEnum e : enums) {
	  if (e.getCode().equals(code)) {
		return e.getMsg();
	  }
	}
	return "";
  }

}
